%Based on paper by A Simple Expression for Multivariate Lagrange Interpolation, Kamron Saniee∗ , 2007.



%This code calculates the coefficients for each node equation
%Eg. Coeff(1,:) gives the set of Coefficients of node 1. 
%Eg. Coeff(2,:) gives the set of Coefficients of node 2.
%
%To use the resulting coefficients you may do the following.
%Step 1: Determine the points x & y you want to find the shape functions for.
%Step 2: Determine the order of the shape function.
%Step 3: Call function "Mat=Build<Triangle, Quad, etc>Matrix(order, x, y, NumOfNodes)"
%Step 4: Multiply Mat with Transpose(CoeffMatrix) as ,  N=Mat*CoeffMatrix'
%N(1,1), N(1,2), N(1,3), ... with represent the different shape functions 
%If COLUMN vectors are passed in x and y then N(:,1), N(:,2), N(:,3), ... will
%represent the different shape functions.


function CoeffMatrix=FindCoeffTriangle(order)
NodeList=GmshNodeListTriangle(order);
x=NodeList(:,1);
y=NodeList(:,2);
NumOfNodes=NumOfTriNodes(order); %The Nodes are in the same sequence as generated by Gmsh.
Mat=BuildTriangleMatrix(order, x, y, NumOfNodes); %Matrix generated as per Kamron Saniee∗, (2007).
CofMatrix=cof(Mat); %Finds cofactor of each matrix element.
CoeffMatrix =eye(NumOfNodes)*cof(Mat)/det(Mat); %each row represents the Coeff set of one node.

